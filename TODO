
TODO
----


Primitives
----------

  * Our primitives are mostly written in pure-perl.  If we made them
    entirely pure-perl we'd be able to drop Slaughter/linux, and
    Slaughter/generic - just merging things together.

    NOTE:  We could and should do this, but the package handling is going to
    be non-portable regardless.

  * Make Slaughter::API::generic a base-class?

  * Add GPG validation for file downloads?

       e.g. when fetching /default.policy also fetch /default.policy.sig
            and only accept if signature is valid.



Server-Driver
-------------

  * Each client node downloads and schedules itself.  It might be useful
    to accept a request from a location, not necessarily the central policy
    server, to initiate a run.

       e.g. Write a simple service that listens on 1.2.3.4:8888 and when
            a correctly validated request comes in just run "system( slaughter)"

    NOTE:  We then need to think about keys.



Logging
-------

  * Logging is simple as the log output from each run is sent to a different
    file, that makes it simple to handle emailing as it reduces the problem
    to mailing the contents of a new file.  However logfiles like this are nasty.

  * Log to a single file, appending, on each run.  Either drop the mailing of
    logfiles or remember where we started to append from?


Steve
--


