
Primitives
----------

  * Our primitives are mostly written in pure-perl.  If we made them
    entirely pure-perl we'd be able to drop Slaughter/linux, and
    Slaughter/generic - just merging things together.

    NOTE:  We could and should do this, but the package handling is going to
    be non-portable regardless.

  * Make Slaughter::API::generic a base-class?

  * Add GPG validation for file downloads?

       e.g. when fetching /default.policy also fetch /default.policy.sig
            and only accept if signature is valid.



Server-Driver
-------------

  * Each client node downloads and schedules itself.  It might be useful
    to accept a request from a location, not necessarily the central policy
    server, to initiate a run.

       e.g. Write a simple service that listens on 1.2.3.4:8888 and when
            a correctly validated request comes in just run "system( slaughter)"

    NOTE:  We then need to think about keys.



Logging
-------

  * Logging has been exorcised from slaughter 2.x - instead output will go
    via mail, assuming we're launched via cron.  This needs to be updated.


Misc
----

  Info modules need work:

  * Support Slaughter::Info::Local:$^O - if present.

  * Update linux module to fetch:
           - QEMU version, if running under it.
           - Free RAM.
           - Total RAM.
           - Uptime, in seconds.

Steve
--


