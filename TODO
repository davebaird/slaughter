
Modules
-------

It would be useful to allow Perl modules/classes to be distributed
alongside polices.  These could allow abstractions and local
helpers to be written.

For example:

  package Apache2;

  sub sites()
  sub enabled()
  sub enableSite( $name );

We'll implement this via:

    FetchModule( "name" );

Then concatenate to the end of the generated slaughter-script.

  1.  Change each transports to remove the files/ prefix from
     fetch contents.

  2.  Change policy fetching to happen in slaughter, via fetchContents
     with prefix of /policies/

  3.  Add module handling in slaughter too, via the same mechanism.

This cuts down on the use of expandpolicyinclusion, and removes
the distinction in the transports between "file" and "policy" fetches
to avoid having three special cases (files, policies, and modules).




Validation
----------

  We want a step 2.5 in this list:

   1.  Get system info.
   2.  Download policies.
   3.  Execute policies.

  To validate policies/whatever.  GPG validation?  Something else?

       e.g. when fetching /default.policy also fetch /default.policy.sig
            and only accept if signature is valid.


Server-Driver
-------------

  * Each client node downloads and schedules itself.  It might be useful
    to accept a request from a location, not necessarily the central policy
    server, to initiate a run.

       e.g. Write a simple service that listens on 1.2.3.4:8888 and when
            a correctly validated request comes in just run "system( slaughter)"

    NOTE:  We then need to think about keys.


Steve
--

