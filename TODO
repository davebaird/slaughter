
Primitives
----------

  * Our primitives are mostly written in pure-perl.  If we made them
    entirely pure-perl we'd be able to implement the majority of our
    primitives in Slaughter/AP/generic.

    We're going to have three issues here:

        1.  The packaging is system-dependant, and will require new
            implementations.

        2.  We're not using classes, the API methods are exported directly
            into the caller's namespace.

        3.  I don't believe we can use use inheritance due to 2.



Validation
----------

  We want a step 2.5 in this list:

   1.  Get system info.
   2.  Download policies.
   3.  Execute policies.

  To validate policies/whatever.  GPG validation?  Something else?

       e.g. when fetching /default.policy also fetch /default.policy.sig
            and only accept if signature is valid.



Server-Driver
-------------

  * Each client node downloads and schedules itself.  It might be useful
    to accept a request from a location, not necessarily the central policy
    server, to initiate a run.

       e.g. Write a simple service that listens on 1.2.3.4:8888 and when
            a correctly validated request comes in just run "system( slaughter)"

    NOTE:  We then need to think about keys.



Logging
-------

  * Logging has been exorcised from slaughter 2.x - instead output will go
    via mail, assuming we're launched via cron.  This needs to be updated.



Misc
----

  Info modules need work:

  * Update linux module to fetch:
           - QEMU version, if running under it.
           - Free RAM.
           - Total RAM.
           - Uptime, in seconds.



Installation
------------

  Currently using a hack to install into 'vendorlib'.  Need to either:

    a) Test this works on OpenBSD b) Look at a perl-alike installer.  (perl Makefile.PL && make install, etc).


Steve
--




